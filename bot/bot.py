import telebot
from dotenv import load_dotenv
import json
import time
import os

# === –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv('/var/www/project/.env') 

TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä.")
    exit(1)

bot = telebot.TeleBot(TOKEN)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
STORAGE_DIR = "/var/www/project/storage"
DATA_FILE = "/var/www/project/storage/data.json"
IMAGE_DIR = "/var/www/project/public/assets/pic/user-bot"
# === –ú–∞—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∞–π—Ç–∞ ===
DEFAULT_DATA = {"user_id": None, "title": "", "image": "", "text": "", "footer": ""}


# === –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ===
os.makedirs(STORAGE_DIR, exist_ok=True)
os.makedirs(IMAGE_DIR, exist_ok=True)


# === –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º data.json, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ===
if not os.path.exists(DATA_FILE):
    print(f"üîπ –§–∞–π–ª {DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(DEFAULT_DATA, file, indent=4, ensure_ascii=False)

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ===
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
        return DEFAULT_DATA

# === –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ===
def save_data(new_data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(new_data, file, indent=4, ensure_ascii=False)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON: {e}")

# === –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ===
def is_owner(message):
    data = load_data()
    user_id = data.get("user_id")

    # –ï—Å–ª–∏ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id is None:
        data["user_id"] = message.chat.id
        save_data(data)
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ ID —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if user_id == message.chat.id:
        return True
    else:
        bot.send_message(message.chat.id, "üö´ –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–∞–π—Ç–∞!")
        return False


# === –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ `/start` ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not is_owner(message):
            return

    bot.send_message(
        message.chat.id,
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —É–ø—Ä–∞–≤–ª—è—é –≤–∞—à–∏–º —Å–∞–π—Ç–æ–º.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ñ—É—Ç–µ—Ä —Å–∞–π—Ç–∞.\n\n"
        "üìú –î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ: `/help`"
    )

# === –ö–æ–º–∞–Ω–¥–∞ `/help` ===
@bot.message_handler(commands=['help'])
def send_help(message):
    if not is_owner(message):
            return

    help_text = (
        "üìú *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n\n"
        "üîß *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∞–π—Ç–∞:*\n"
        "`/title`  ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç–∞\n"
        "`/text`  ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∞–π—Ç–µ\n"
        "`/footer`  ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —Ñ—É—Ç–µ—Ä —Å–∞–π—Ç–∞\n"
        "`/image` ‚Äì –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)\n\n"
        "‚öô *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "`/setup` ‚Äì –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ \n"
        "`/help` ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )

    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")


# === –ö–æ–º–∞–Ω–¥–∞ `/title –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫` ===
@bot.message_handler(commands=['title'])
def set_title(message):
    if not is_owner(message):
            return

    new_title = message.text.replace("/title", "").strip()
    if not new_title:
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/title –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫`")
        return

    data = load_data()
    data["title"] = new_title
    save_data(data)

    bot.reply_to(message, f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{new_title}*", parse_mode="Markdown")

# === –ö–æ–º–∞–Ω–¥–∞ `/text –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç` ===
@bot.message_handler(commands=['text'])
def set_text(message):
    if not is_owner(message):
            return

    new_text = message.text.replace("/text", "").strip()
    if not new_text:
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/text –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç`")
        return

    data = load_data()
    data["text"] = new_text
    save_data(data)

    bot.reply_to(message, f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:\n\n_{new_text}_", parse_mode="Markdown")

# === –ö–æ–º–∞–Ω–¥–∞ `/footer –ù–æ–≤—ã–π —Ñ—É—Ç–µ—Ä` ===
@bot.message_handler(commands=['footer'])
def set_footer(message):
    new_footer = message.text.replace("/footer", "").strip()
    if not new_footer:
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/footer –ù–æ–≤—ã–π —Ñ—É—Ç–µ—Ä`")
        return

    data = load_data()
    data["footer"] = new_footer
    save_data(data)

    bot.reply_to(message, f"‚úÖ –§—É—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:\n`{new_footer}`", parse_mode="Markdown")

# === –ö–æ–º–∞–Ω–¥–∞ `/image` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ===
@bot.message_handler(commands=['image'])
def request_image(message):
    if not is_owner(message):
            return

    bot.reply_to(message, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –∑–∞–≥—Ä—É–∂—É –µ–≥–æ –Ω–∞ —Å–∞–π—Ç.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ ===
@bot.message_handler(content_types=['photo'])
def save_image(message):
    if not is_owner(message):
            return
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    image_path = os.path.join(IMAGE_DIR, f"user_image.jpg")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    with open(image_path, "wb") as img:
        img.write(downloaded_file)

    # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Å –Ω–æ–≤—ã–º –ø—É—Ç–µ–º
    data = load_data()
    data["image"] = f"assets/pic/user-bot/user_image.jpg"
    save_data(data)

    bot.reply_to(message, f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–ü—É—Ç—å: `{data['image']}`", parse_mode="Markdown")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ===
@bot.message_handler(func=lambda message: True)
def handle_unknown_command(message):
    if not is_owner(message):
            return

    bot.send_message(
        message.chat.id,
        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ `/help`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)

